version: "3.8"

# Network definition
networks:
  dockerproxy:
    name: dockerproxy
    external: true
  default:
    driver: bridge

# Services definition
services:

  # Traefik - Reverse proxy
  traefik:
    image: traefik
    container_name: traefik
    restart: unless-stopped
    command:
      # General & Logging Options
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8081

      # API options
      - --api=true
      # - --api.insecure=true

      # Logging options
      - --log=true
      # - --log.level=DEBUG
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499

      # Docker options
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.swarmMode=false
      - --providers.docker.network=dockerproxy

      # Additional rules options
      - --providers.file.directory=/rules
      - --providers.file.watch=true

      # SSL options
      - --certificatesresolvers.leresolver.acme.httpchallenge=true
      - --certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=http
      - --certificatesresolvers.leresolver.acme.email=$EMAIL
      - --certificatesresolvers.leresolver.acme.storage=/acme.json
      # Let's encrypt staging directory - for debugging purposes only
      # - --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory

      # TLS insecure skip verify (needed for Unifi controller)
      - --serversTransport.insecureSkipVerify=true

    ports:
      - 80:80
      - 443:443

    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 

    networks:
      - dockerproxy
    
    security_opt:
      - no-new-privileges:true

    labels:
      - traefik.enable=true

      # HTTP Routers
      - traefik.http.routers.traefik-rtr.entrypoints=https
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)
      - traefik.http.routers.traefik-rtr.tls=true
      - traefik.http.routers.traefik-rtr.tls.certresolver=leresolver

      ## Services - API
      - traefik.http.routers.traefik-rtr.service=api@internal

      ## Middlewares
      - traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file
  
  # Google OAuth - Single Sign On using OAuth 2.0
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth
    restart: unless-stopped
    networks:
      - dockerproxy
    security_opt:
      - no-new-privileges:true
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST=$OAUTH_EMAIL,$OAUTH_EMAIL2
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
    
    labels:
      - "traefik.enable=true"
      
      ## HTTP Routers
      - traefik.http.routers.oauth-rtr.entrypoints=https
      - traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)
      - traefik.http.routers.oauth-rtr.tls=true
      - traefik.http.routers.oauth-rtr.tls.certresolver=leresolver
      
      ## HTTP Services
      - traefik.http.routers.oauth-rtr.service=oauth-svc
      - traefik.http.services.oauth-svc.loadbalancer.server.port=4181

      ## Middlewares
      - traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file
      
  # Heimdall - dashboard frontend
  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/heimdall:/config
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.heimdall-rtr.entrypoints=https
      - traefik.http.routers.heimdall-rtr.rule=Host(`www.$DOMAINNAME`)
      - traefik.http.routers.heimdall-rtr.tls=true
      - traefik.http.routers.heimdall-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.heimdall-rtr.service=heimdall-svc
      - traefik.http.services.heimdall-svc.loadbalancer.server.port=80

  # Transmission - Torrent downlaoder
  transmission:
    image: linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/transmission:/config
      - ${MEDIADIR}/Downloads:/downloads
    restart: unless-stopped
    ports:
      - 51413:51413
      - 51413:51413/udp
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.transmission-rtr.entrypoints=https
      - traefik.http.routers.transmission-rtr.rule=Host(`transmission.$DOMAINNAME`)
      - traefik.http.routers.transmission-rtr.tls=true
      - traefik.http.routers.transmission-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.transmission-rtr.middlewares=chain-basic-auth@file
      ## HTTP Services
      - traefik.http.routers.transmission-rtr.service=transmission-svc
      - traefik.http.services.transmission-svc.loadbalancer.server.port=9091

  # Alltube - Youtube downloader
  alltube:
    image: rudloff/alltube
    container_name: alltube
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.alltube-rtr.entrypoints=https
      - traefik.http.routers.alltube-rtr.rule=Host(`alltube.$DOMAINNAME`)
      - traefik.http.routers.alltube-rtr.tls=true
      - traefik.http.routers.alltube-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.alltube-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.alltube-rtr.service=alltube-svc
      - traefik.http.services.alltube-svc.loadbalancer.server.port=80
  
  # Sonarr - TV Show manager
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/sonarr:/config
      - ${MEDIADIR}/TVShows:/tv
      - ${MEDIADIR}/Downloads:/downloads
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.sonarr-rtr.entrypoints=https
      - traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)
      - traefik.http.routers.sonarr-rtr.tls=true
      - traefik.http.routers.sonarr-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.sonarr-rtr.middlewares=chain-basic-auth@file
      ## HTTP Services
      - traefik.http.routers.sonarr-rtr.service=sonarr-svc
      - traefik.http.services.sonarr-svc.loadbalancer.server.port=8989
  
  # Radarr - Movie manager
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/radarr:/config
      - ${MEDIADIR}/Movies:/movies
      - ${MEDIADIR}/Downloads:/downloads
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.radarr-rtr.entrypoints=https
      - traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)
      - traefik.http.routers.radarr-rtr.tls=true
      - traefik.http.routers.radarr-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.radarr-rtr.middlewares=chain-basic-auth@file
      ## HTTP Services
      - traefik.http.routers.radarr-rtr.service=radarr-svc
      - traefik.http.services.radarr-svc.loadbalancer.server.port=7878
  
  # Plex - Plex Media Server
  plex:
    image: linuxserver/plex
    container_name: plex
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=docker
    # Ports - necessary to get access through plex.tv/web
    ports:
      - 32400:32400
    volumes:
      - ${DOCKERDIR}/plex:/config
      - ${MEDIADIR}/TVShows:/tv
      - ${MEDIADIR}/Movies:/movies
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.plex-rtr.entrypoints=https
      - traefik.http.routers.plex-rtr.rule=Host(`plex.$DOMAINNAME`)
      - traefik.http.routers.plex-rtr.tls=true
      - traefik.http.routers.plex-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.plex-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.plex-rtr.service=plex-svc
      - traefik.http.services.plex-svc.loadbalancer.server.port=32400

  # Nextcloud - Public File Server
  nextcloud:
    image: nextcloud
    container_name: nextcloud
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/nextcloud:/var/www/html
      - ${MEDIADIR}:/media
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.nextcloud-rtr.entrypoints=https
      - traefik.http.routers.nextcloud-rtr.rule=Host(`nextcloud.$DOMAINNAME`)
      - traefik.http.routers.nextcloud-rtr.tls=true
      - traefik.http.routers.nextcloud-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.nextcloud-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.nextcloud-rtr.service=nextcloud-svc
      - traefik.http.services.nextcloud-svc.loadbalancer.server.port=80

  # Bazarr - Subtitle manager
  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/bazarr/config:/config
      - ${MEDIADIR}/Movies:/movies
      - ${MEDIADIR}/TVShows:/tv
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.bazarr-rtr.entrypoints=https
      - traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)
      - traefik.http.routers.bazarr-rtr.tls=true
      - traefik.http.routers.bazarr-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.bazarr-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.bazarr-rtr.service=bazarr-svc
      - traefik.http.services.bazarr-svc.loadbalancer.server.port=6767

  # Jackett - Torznab manager
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
    volumes:
      - ${DOCKERDIR}/jackett:/config
      - ${MEDIADIR}/Downloads:/downloads
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.jackett-rtr.entrypoints=https
      - traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAINNAME`)
      - traefik.http.routers.jackett-rtr.tls=true
      - traefik.http.routers.jackett-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.jackett-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.jackett-rtr.service=jackett-svc
      - traefik.http.services.jackett-svc.loadbalancer.server.port=9117
  
  # Codeserver - Visual Studio code in the webbrowser
  code-server:
    image: linuxserver/code-server
    container_name: code-server
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/codeserver:/config
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.codeserver-rtr.entrypoints=https
      - traefik.http.routers.codeserver-rtr.rule=Host(`codeserver.$DOMAINNAME`)
      - traefik.http.routers.codeserver-rtr.tls=true
      - traefik.http.routers.codeserver-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.codeserver-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.codeserver-rtr.service=codeserver-svc
      - traefik.http.services.codeserver-svc.loadbalancer.server.port=8443

  # Duckdns - updating domain
  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SUBDOMAINS=$DUCKDNS_DOMAIN
      - TOKEN=$DUCKDNS_TOKEN
      - LOG_FILE=true
    restart: unless-stopped
  
  # Ombi - managing plex requests
  ombi:
    image: linuxserver/ombi
    container_name: ombi
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/ombi:/config
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.ombi-rtr.entrypoints=https
      - traefik.http.routers.ombi-rtr.rule=Host(`ombi.$DOMAINNAME`)
      - traefik.http.routers.ombi-rtr.tls=true
      - traefik.http.routers.ombi-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.ombi-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.ombi-rtr.service=ombi-svc
      - traefik.http.services.ombi-svc.loadbalancer.server.port=3579
  
  # Wetty - Web + TTY: a terminal in your webbrowser
  wetty:
    container_name: wetty
    image: svenihoney/wetty
    restart: unless-stopped
    environment:
      - REMOTE_SSH_SERVER=192.168.0.3
      - REMOTE_SSH_PORT=22
      - REMOTE_SSH_USER=fileserver
      - SSH_AUTH=publickey
      - SSH_KEY=/config/id_rsa
    volumes:
      - ${DOCKERDIR}/wetty/id_rsa:/config/id_rsa:ro
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.wetty-rtr.entrypoints=https
      - traefik.http.routers.wetty-rtr.rule=Host(`wetty.$DOMAINNAME`)
      - traefik.http.routers.wetty-rtr.tls=true
      - traefik.http.routers.wetty-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.wetty-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.wetty-rtr.service=wetty-svc
      - traefik.http.services.wetty-svc.loadbalancer.server.port=3000

  # Unifi controller - For managing unifi devices
  unifi-controller:
    image: linuxserver/unifi-controller
    container_name: unifi-controller
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/unifi:/config
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 8443:8443
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.unifi-rtr.entrypoints=https
      - traefik.http.routers.unifi-rtr.rule=Host(`unifi.$DOMAINNAME`)
      - traefik.http.routers.unifi-rtr.tls=true
      - traefik.http.routers.unifi-rtr.tls.certresolver=leresolver
      ## Middlewares
      - traefik.http.routers.unifi-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.unifi-rtr.service=unifi-svc
      - traefik.http.services.unifi-svc.loadbalancer.server.port=8443

      # Since unifi is using SSL cert internally, traefik needs to connect to unifi service through https
      - traefik.http.services.unifi-svc.loadbalancer.server.scheme=https

  # Samba - SMB fileshare
  samba:
    image: dperson/samba
    container_name: samba
    network_mode: "host"
    environment:
      - USERID=${PUID}
      - GROUPID=${PGID}
      - TZ=${TZ}
      
      # Set up user & shares
      - USER=fileserver;Jocilwolal1993--
      - SHARE=Media;/media;yes;no;no;fileserver
      - RECYCLE=false
      - WORKGROUP=WORKGROUP
      - NMBD=true

      # smb.conf variables - general
      - GLOBAL=server string = ArchServer
      - GLOBAL1=hosts allow = 192.168.0. 2a02:1810:4f3f:bf00::0/64
      - GLOBAL2=security = user
      - GLOBAL3=invalid users = root

      # Performance settings
      - GLOBAL4=server multi channel support = yes
      - GLOBAL5=deadtime = 30
      - GLOBAL6=use sendfile = yes
      - GLOBAL7=aio read size = 1
      - GLOBAL8=aio write size = 1
      - GLOBAL9=socket options = IPTOS_LOWDELAY TCP_NODELAY IPTOS_THROUGHPUT SO_RCVBUF=131072 SO_SNDBUF=131072
      - GLOBAL10=netbios name = ArchServer
      - GLOBAL11=load printers = yes
    
    read_only: true
    tmpfs:
      - /tmp
    restart: unless-stopped
    volumes:
      - ${MEDIADIR}:/media:z
               
  # WSDD - Web Service daemon (to make samba share visible in Windows)
  wsdd:
    image: "jonasped/wsdd"
    container_name: wsdd
    environment:
      - HOSTNAME=ArchServer
      - WORKGROUP=WORKGROUP
    restart: unless-stopped
    network_mode: "host"
  
  # Pi-hole - A black hole for Internet advertisements
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    domainname: $DOMAINNAME
    networks:
      - dockerproxy
    dns:
      - 127.0.0.1
      - 1.1.1.1
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
    volumes:
      - ${DOCKERDIR}/pihole:/etc/pihole/
      - ${DOCKERDIR}/dnsmasq:/etc/dnsmasq.d/
      # run `touch ./pihole.log` first unless you like errors
      - ${DOCKERDIR}/pihole/pihole.log:/var/log/pihole.log
    environment:
      ServerIP: $SERVER_IP
      PROXY_LOCATION: pihole
      VIRTUAL_HOST: pihole.$DOMAINNAME
      VIRTUAL_PORT: 80
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
    restart: unless-stopped
    labels:
      - traefik.enable=true

      # Redirect all http traffic to the blocking page
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.priority=1
      - traefik.http.routers.http-catchall.service=pihole-svc

      ## HTTP Routers
      - traefik.http.routers.pihole-rtr.entrypoints=https
      - traefik.http.routers.pihole-rtr.rule=Host(`pihole.$DOMAINNAME`)
      - traefik.http.routers.pihole-rtr.tls=true
      - traefik.http.routers.pihole-rtr.tls.certresolver=leresolver
    
      ## Middlewares
      - traefik.http.routers.pihole-rtr.middlewares=chain-no-auth@file

      ## HTTP Services
      - traefik.http.routers.pihole-rtr.service=pihole-svc
      - traefik.http.services.pihole-svc.loadbalancer.server.port=80

  # Duplicacy - Local & Cloud backup
  duplicacy:
    image: saspus/duplicacy-web:mini
    container_name: duplicacy
    hostname: duplicacy-archserver-timo
    restart: unless-stopped
    environment:
      - USR_ID=${PUID}
      - GRP_ID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERDIR}/duplicacy/config:/config
      - ${DOCKERDIR}/duplicacy/config:/logs
      - ${DOCKERDIR}/duplicacy/config:/cache
      - ${BACKUPDIR}:/backup
      - ${MEDIADIR}:/media
    networks:
        - dockerproxy
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.duplicacy-rtr.entrypoints=https
      - traefik.http.routers.duplicacy-rtr.rule=Host(`backup.$DOMAINNAME`)
      - traefik.http.routers.duplicacy-rtr.tls=true
      - traefik.http.routers.duplicacy-rtr.tls.certresolver=leresolver
    
      ## Middlewares
      - traefik.http.routers.duplicacy-rtr.middlewares=chain-oauth@file

      ## HTTP Services
      - traefik.http.routers.duplicacy-rtr.service=duplicacy-svc
      - traefik.http.services.duplicacy-svc.loadbalancer.server.port=3875

  # PHP-scanner-server - A webserver that can connect to a scanner
  scannerserver:
    container_name: scannerserver
    build: 
      context: ${DOCKERDIR}/scannerserver/build
      args:
        proxy: $proxy
    volumes:
      - ${DOCKERDIR}/scannerserver/scans:/var/www/html/scans
      - ${DOCKERDIR}/scannerserver/config:/var/www/html/config
    devices:
      - /dev/bus/usb:/dev/bus/usb
    restart: unless-stopped
    networks:
      - dockerproxy
    labels:
      - traefik.enable=true

      ## HTTP Routers
      - traefik.http.routers.phpscannerserver-rtr.entrypoints=https
      - traefik.http.routers.phpscannerserver-rtr.rule=Host(`scan.$DOMAINNAME`)
      - traefik.http.routers.phpscannerserver-rtr.tls=true
      - traefik.http.routers.phpscannerserver-rtr.tls.certresolver=leresolver
    
      ## Middlewares
      - traefik.http.routers.phpscannerserver-rtr.middlewares=chain-no-auth@file

      ## HTTP Services
      - traefik.http.routers.phpscannerserver-rtr.service=phpscannerserver-svc
      - traefik.http.services.phpscannerserver-svc.loadbalancer.server.port=80
  
  # CUPS - Printing server
  cups:
    image: ydkn/cups
    container_name: cups
    volumes:
      - ${DOCKERDIR}/cups:/etc/cups
    environment:
      - ADMIN_PASSWORD=${CUPS_PASSWORD}
    restart: unless-stopped
    networks:
      - dockerproxy
    ports: 
      - 631:631
    privileged: true
    volumes:
      - /var/run/dbus:/var/run/dbus
    devices:
      - /dev/bus/usb:/dev/bus/usb

  # Avahi
  avahi:
    image: ydkn/avahi
    container_name: avahi
    network_mode: host
    privileged: true
    volumes:
      - ${DOCKERDIR}/avahi:/etc/avahi/services
