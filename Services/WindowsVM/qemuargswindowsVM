# This file provides all the command line options to boot a Windows 10 Gaming VM WITH GPU passthrough
# This file can be used in conjunction with the script startwindowsVM to start up a Qemu KVM VM OR it can be used in a systemd service unit

## See https://www.reddit.com/r/Amd/comments/ckr5f4/amd_ryzen_3000_series_linux_support_and/ for more info

args = "-name Windows \
-drive if=pflash,format=raw,readonly,file=/usr/share/ovmf/x64/OVMF_CODE.fd \
-drive if=pflash,format=raw,file=/home/fileserver/Applications/WindowsVM/ovmf_windowsvm_vars.fd \
-daemonize \
-pidfile /run/qemu_windowsvm.pid \
-vga none \
-nodefaults \
-enable-kvm \
-machine type=q35,accel=kvm,kernel-irqchip=on \
-cpu host,+topoext,kvm=off,hv_spinlocks=0x1fff,hv_relaxed,hv_vapic,hv_time,hv_crash,hv_reset,hv_vpindex,hv_runtime,hv_synic,hv_stimer,hv_vendor_id=whatever \
-smp 12,sockets=1,cores=6,threads=2 \
-global ICH9-LPC.disable_s3=1 \
-global ICH9-LPC.disable_s4=1 \
-rtc clock=host,base=localtime,driftfix=slew \
-global kvm-pit.lost_tick_policy=delay \
-realtime mlock=off \
-global kvm-pit.lost_tick_policy=discard \
-m 16384 \
-mem-path /dev/hugepages \
-mem-prealloc \
-monitor telnet:localhost:7100,server,nowait,nodelay \
-nographic \
-serial none \
-parallel none \
-device ioh3420,chassis=1,bus=pcie.0,addr=03.0,id=ioh3420-root-port-1 \
-device vfio-pci,host=06:00.0,bus=ioh3420-root-port-1,addr=00.0,multifunction=on \
-device vfio-pci,host=06:00.1,bus=pcie.0 \
-drive file=/dev/disk/by-id/ata-Samsung_SSD_750_EVO_500GB_S36SNWBH531856L,id=disk0,if=none,aio=native,cache=none,format=raw,discard=unmap \
-drive file=/dev/disk/by-id/ata-WDC_WD20EFRX-68EUZN0_WD-WCC4M7NSP35V,id=disk1,if=none,aio=native,cache=none,format=raw,discard=unmap \
-object iothread,id=iothread0 \
-object iothread,id=iothread1 \
-device virtio-scsi,iothread=iothread0,id=scsi0 \
-device virtio-scsi,iothread=iothread1,id=scsi1 \
-device scsi-hd,drive=disk0,bus=scsi0.0 \
-device scsi-hd,drive=disk1,bus=scsi1.0 \
-device virtio-net-pci,netdev=network0,mac=52:54:00:00:00:01 \
-netdev tap,id=network0,ifname=tap0,script=no,downscript=no"

############################
# Explanation of Arguments #
############################

# -name Windows \
# -drive if=pflash,format=raw,readonly,file=/usr/share/ovmf/x64/OVMF_CODE.fd \
        # Use an EFI (OVMF) Bios, updated through arch package
# -drive if=pflash,format=raw,file=/home/fileserver/Applications/WindowsVM/ovmf_windowsvm_vars.fd \
        # Use seperate vars file for OVMF

# -daemonize \
# -pidfile /run/qemu_windowsvm.pid \
# -vga none \
        # do not use any of the built-in VGA emulation

#-nodefaults \
#-enable-kvm \
#-machine type=q35,accel=kvm,kernel-irqchip=on \
        # Use the q35 (Intel ICH9) type of emulation

# -cpu host,kvm=off,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time,hv_vendor_id=whatever  \
        # kvm=off & hv_vendor_id is REQUIRED for NVIDIA GPU Passthrough

# -smp 6,sockets=1,cores=6,threads=2 \
        # Use 6 core cpu with hyperthreading

# -m 16384 \
        # Use 16 gb of memory

# -mem-path /dev/hugepages \
        # Use hugepages system for memory

# -mem-prealloc \
# -monitor telnet:localhost:7100,server,nowait,nodelay \
        # Create a telnet monitor for qemu commands - used for the stopwindowsVM script

# -nographic \
# -serial none \
# -parallel none \
# -rtc clock=host,base=localtime \
        # Synchronize clocks between guest and host

# -device vfio-pci,host=06:00.0,addr=09.0,multifunction=on \
# -device vfio-pci,host=06:00.1,addr=09.1 \
# -device vfio-pci,host=08:00.4,addr=11 \
        # PCI Passthrough of NVIDIA Graphics Card, its audio and the digital audio of the motherboard

# -drive file=/dev/disk/by-id/ata-Samsung_SSD_750_EVO_500GB_S36SNWBH531856L,id=disk0,if=none,aio=native,cache=none,format=raw,discard=unmap \
# -drive file=/dev/disk/by-id/ata-WDC_WD20EFRX-68EUZN0_WD-WCC4M7NSP35V,id=disk1,if=none,aio=native,cache=none,format=raw,discard=unmap \
        # Passthrough of 500 gb SSD & 1 TB HHD drive

# -object iothread,id=iothread0 \
# -object iothread,id=iothread1 \
# -device virtio-scsi,iothread=iothread0,id=scsi0 \
# -device virtio-scsi,iothread=iothread1,id=scsi1 \
# -device scsi-hd,drive=disk0,bus=scsi0.0 \
# -device scsi-hd,drive=disk1,bus=scsi1.0 \
        # boot up IO threads, 1 per drive

# -device virtio-net-pci,netdev=network0,mac=52:54:00:00:00:01 \
# -netdev tap,id=network0,ifname=tap0,script=no,downscript=no
        # Networking card through virtio-net-pci & Enable bridged networking

##################
# Extra Commands #
##################

################################
# Load in the virtio driver cd #
################################

# -drive file=/home/fileserver/Applications/WindowsVM/virtio-win.iso,id=virtiocd,format=raw,if=none -device ide-cd,bus=ide.1,drive=virtiocd \

######################################
# Load in the Windows 10 Install DVD #
######################################

# -drive file=/home/fileserver/Applications/WindowsVM/windows10.iso,id=isocd,format=raw,if=none -device ide-cd,bus=ide.0,drive=isocd \

##############################
# Enable VNC & extra display #
##############################

# -usbdevice tablet is needed to get the right mouse position in VNC

# -vnc :2 -vga qxl -usbdevice tablet \

#########################
# Add keyboard/Trackpad #
#########################

# -usbdevice host:045e:0800
